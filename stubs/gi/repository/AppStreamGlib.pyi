import typing

from gi.repository import GLib
from gi.repository import GObject
from gi.repository import GdkPixbuf
from gi.repository import Gio
T = typing.TypeVar("T")

APP_SUBSUME_FLAG_DEDUPE: int = 1913126968
APP_SUBSUME_FLAG_MERGE: int = 267911104
IMAGE_ALPHA_FLAG_BOTTOM: int = 2
IMAGE_ALPHA_FLAG_INTERNAL: int = 16
IMAGE_ALPHA_FLAG_LEFT: int = 4
IMAGE_ALPHA_FLAG_NONE: int = 0
IMAGE_ALPHA_FLAG_RIGHT: int = 8
IMAGE_ALPHA_FLAG_TOP: int = 1
IMAGE_LARGE_HEIGHT: int = 423
IMAGE_LARGE_WIDTH: int = 752
IMAGE_NORMAL_HEIGHT: int = 351
IMAGE_NORMAL_WIDTH: int = 624
IMAGE_THUMBNAIL_HEIGHT: int = 63
IMAGE_THUMBNAIL_WIDTH: int = 112
_namespace: str = "AppStreamGlib"
_version: str = "1.0"

def id_kind_from_string(id_kind: str) -> IdKind: ...
def id_kind_to_string(id_kind: IdKind) -> str: ...
def inf_error_quark() -> int: ...
def inf_get_driver_version(keyfile: GLib.KeyFile, timestamp: int) -> str: ...
def inf_load_data(keyfile: GLib.KeyFile, data: str, flags: InfLoadFlags) -> bool: ...
def inf_load_file(keyfile: GLib.KeyFile, filename: str, flags: InfLoadFlags) -> bool: ...
def kudo_kind_from_string(kudo_kind: str) -> KudoKind: ...
def kudo_kind_to_string(kudo_kind: KudoKind) -> str: ...
def markup_convert(markup: str, format: MarkupConvertFormat) -> str: ...
def markup_convert_full(markup: str, format: MarkupConvertFormat, flags: MarkupConvertFlag) -> str: ...
def markup_convert_simple(markup: str) -> str: ...
def markup_import(text: str, format: MarkupConvertFormat) -> str: ...
def markup_strsplit_words(text: str, line_len: int) -> list[str]: ...
def markup_validate(markup: str) -> bool: ...
def node_error_quark() -> int: ...
def node_get_attribute(node: GLib.Node, key: str) -> str: ...
def node_get_attribute_as_int(node: GLib.Node, key: str) -> int: ...
def node_get_attribute_as_uint(node: GLib.Node, key: str) -> int: ...
def node_get_comment(node: GLib.Node) -> str: ...
def node_get_data(node: GLib.Node) -> str: ...
def node_get_localized(node: GLib.Node, key: str) -> dict[None, None]: ...
def node_get_localized_best(node: GLib.Node, key: str) -> str: ...
def node_get_localized_unwrap(node: GLib.Node) -> dict[None, None]: ...
def node_get_name(node: GLib.Node) -> str: ...
def node_get_tag(node: GLib.Node) -> Tag: ...
def node_insert_hash(parent: GLib.Node, name: str, attr_key: str, hash: dict[None, None], insert_flags: NodeInsertFlags) -> None: ...
def node_insert_localized(parent: GLib.Node, name: str, localized: dict[None, None], insert_flags: NodeInsertFlags) -> None: ...
def node_to_xml(node: GLib.Node, flags: NodeToXmlFlags) -> GLib.String: ...
def node_unref(node: GLib.Node) -> None: ...
def size_kind_from_string(size_kind: str) -> SizeKind: ...
def size_kind_to_string(size_kind: SizeKind) -> str: ...
def tag_from_string(tag: str) -> Tag: ...
def tag_from_string_full(tag: str, flags: TagFlags) -> Tag: ...
def tag_to_string(tag: Tag) -> str: ...
def urgency_kind_from_string(urgency_kind: str) -> UrgencyKind: ...
def urgency_kind_to_string(urgency_kind: UrgencyKind) -> str: ...
def url_kind_from_string(url_kind: str) -> UrlKind: ...
def url_kind_to_string(url_kind: UrlKind) -> str: ...
def utils_appstream_id_build(str: str) -> str: ...
def utils_appstream_id_valid(str: str) -> bool: ...
def utils_error_quark() -> int: ...
def utils_find_icon_filename(destdir: str, search: str) -> str: ...
def utils_find_icon_filename_full(destdir: str, search: str, flags: UtilsFindIconFlag) -> str: ...
def utils_guid_from_data(namespace_id: str, data: int, data_len: int) -> str: ...
def utils_guid_from_string(str: str) -> str: ...
def utils_guid_is_valid(guid: str) -> bool: ...
def utils_install_filename(location: UtilsLocation, filename: str, origin: str, destdir: str) -> bool: ...
def utils_is_blacklisted_id(desktop_id: str) -> bool: ...
def utils_is_category_id(category_id: str) -> bool: ...
def utils_is_environment_id(environment_id: str) -> bool: ...
def utils_is_spdx_license(license: str) -> bool: ...
def utils_is_spdx_license_id(license_id: str) -> bool: ...
def utils_is_stock_icon_name(name: str) -> bool: ...
def utils_license_to_spdx(license: str) -> str: ...
def utils_search_token_valid(token: str) -> bool: ...
def utils_search_tokenize(search: str) -> list[str]: ...
def utils_spdx_license_detokenize(license_tokens: str) -> str: ...
def utils_spdx_license_tokenize(license: str) -> list[str]: ...
def utils_string_replace(string: GLib.String, search: str, replace: str) -> int: ...
def utils_unique_id_build(scope: AppScope, bundle_kind: BundleKind, origin: str, kind: AppKind, id: str, branch: str) -> str: ...
def utils_unique_id_equal(unique_id1: str, unique_id2: str) -> bool: ...
def utils_unique_id_hash(unique_id: str) -> int: ...
def utils_unique_id_match(unique_id1: str, unique_id2: str, match_flags: UniqueIdMatchFlags) -> bool: ...
def utils_unique_id_valid(unique_id: str) -> bool: ...
def utils_vercmp(version_a: str, version_b: str) -> int: ...
def utils_vercmp_full(version_a: str, version_b: str, flags: VersionCompareFlag) -> int: ...
def utils_version_from_uint16(val: int, flags: VersionParseFlag) -> str: ...
def utils_version_from_uint32(val: int, flags: VersionParseFlag) -> str: ...
def utils_version_parse(version: str) -> str: ...

class Agreement(GObject.Object):
    """
    :Constructors:

    ::

        Agreement(**properties)
        new() -> AppStreamGlib.Agreement

    Object AsAgreement

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def add_section(self, agreement_section: AgreementSection) -> None: ...
    def get_kind(self) -> AgreementKind: ...
    def get_section_default(self) -> AgreementSection: ...
    def get_sections(self) -> list[AgreementSection]: ...
    def get_version_id(self) -> str: ...
    @staticmethod
    def kind_from_string(value: str) -> AgreementKind: ...
    @staticmethod
    def kind_to_string(value: AgreementKind) -> str: ...
    @classmethod
    def new(cls) -> Agreement: ...
    def set_kind(self, kind: AgreementKind) -> None: ...
    def set_version_id(self, version_id: str) -> None: ...
    

class AgreementClass(GObject.GPointer):
    """
    :Constructors:

    ::

        AgreementClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class AgreementSection(GObject.Object):
    """
    :Constructors:

    ::

        AgreementSection(**properties)
        new() -> AppStreamGlib.AgreementSection

    Object AsAgreementSection

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def get_description(self, locale: typing.Optional[str] = None) -> str: ...
    def get_kind(self) -> str: ...
    def get_name(self, locale: typing.Optional[str] = None) -> str: ...
    @classmethod
    def new(cls) -> AgreementSection: ...
    def set_description(self, locale: typing.Optional[str], desc: str) -> None: ...
    def set_kind(self, kind: str) -> None: ...
    def set_name(self, locale: typing.Optional[str], name: str) -> None: ...
    

class AgreementSectionClass(GObject.GPointer):
    """
    :Constructors:

    ::

        AgreementSectionClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class App(GObject.Object):
    """
    :Constructors:

    ::

        App(**properties)
        new() -> AppStreamGlib.App

    Object AsApp

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def add_addon(self, addon: App) -> None: ...
    def add_agreement(self, agreement: Agreement) -> None: ...
    def add_arch(self, arch: str) -> None: ...
    def add_bundle(self, bundle: Bundle) -> None: ...
    def add_category(self, category: str) -> None: ...
    def add_compulsory_for_desktop(self, compulsory_for_desktop: str) -> None: ...
    def add_content_rating(self, content_rating: ContentRating) -> None: ...
    def add_extends(self, extends: str) -> None: ...
    def add_format(self, format: Format) -> None: ...
    def add_icon(self, icon: Icon) -> None: ...
    def add_keyword(self, locale: typing.Optional[str], keyword: str) -> None: ...
    def add_kudo(self, kudo: str) -> None: ...
    def add_kudo_kind(self, kudo_kind: KudoKind) -> None: ...
    def add_language(self, percentage: int, locale: typing.Optional[str] = None) -> None: ...
    def add_launchable(self, launchable: Launchable) -> None: ...
    def add_metadata(self, key: str, value: typing.Optional[str] = None) -> None: ...
    def add_mimetype(self, mimetype: str) -> None: ...
    def add_permission(self, permission: str) -> None: ...
    def add_pkgname(self, pkgname: str) -> None: ...
    def add_provide(self, provide: Provide) -> None: ...
    def add_quirk(self, quirk: AppQuirk) -> None: ...
    def add_release(self, release: Release) -> None: ...
    def add_require(self, require: Require) -> None: ...
    def add_review(self, review: Review) -> None: ...
    def add_screenshot(self, screenshot: Screenshot) -> None: ...
    def add_suggest(self, suggest: Suggest) -> None: ...
    def add_translation(self, translation: Translation) -> None: ...
    def add_url(self, url_kind: UrlKind, url: str) -> None: ...
    def convert_icons(self, kind: IconKind) -> bool: ...
    def equal(self, app2: App) -> bool: ...
    @staticmethod
    def error_quark() -> int: ...
    def get_addons(self) -> list[App]: ...
    def get_agreement_by_kind(self, kind: AgreementKind) -> Agreement: ...
    def get_agreement_default(self) -> Agreement: ...
    def get_architectures(self) -> list[str]: ...
    def get_branch(self) -> str: ...
    def get_bundle_default(self) -> Bundle: ...
    def get_bundles(self) -> list[Bundle]: ...
    def get_categories(self) -> list[str]: ...
    def get_comment(self, locale: typing.Optional[str] = None) -> str: ...
    def get_comments(self) -> dict[None, None]: ...
    def get_compulsory_for_desktops(self) -> list[str]: ...
    def get_content_rating(self, kind: str) -> ContentRating: ...
    def get_content_ratings(self) -> list[ContentRating]: ...
    def get_description(self, locale: typing.Optional[str] = None) -> str: ...
    def get_descriptions(self) -> dict[None, None]: ...
    def get_developer_name(self, locale: typing.Optional[str] = None) -> str: ...
    def get_developer_names(self) -> dict[None, None]: ...
    def get_extends(self) -> list[str]: ...
    def get_format_by_filename(self, filename: str) -> Format: ...
    def get_format_by_kind(self, kind: FormatKind) -> Format: ...
    def get_format_default(self) -> Format: ...
    def get_formats(self) -> list[str]: ...
    def get_icon_default(self) -> Icon: ...
    def get_icon_for_size(self, width: int, height: int) -> Icon: ...
    def get_icon_path(self) -> str: ...
    def get_icons(self) -> list[Icon]: ...
    def get_id(self) -> str: ...
    def get_id_filename(self) -> str: ...
    def get_id_kind(self) -> IdKind: ...
    def get_id_no_prefix(self) -> str: ...
    def get_keywords(self, locale: typing.Optional[str] = None) -> list[str]: ...
    def get_kind(self) -> AppKind: ...
    def get_kudos(self) -> list[str]: ...
    def get_language(self, locale: typing.Optional[str] = None) -> int: ...
    def get_languages(self) -> list[str]: ...
    def get_launchable_by_kind(self, kind: LaunchableKind) -> Launchable: ...
    def get_launchable_default(self) -> Launchable: ...
    def get_launchables(self) -> list[Launchable]: ...
    def get_merge_kind(self) -> AppMergeKind: ...
    def get_metadata(self) -> dict[str, str]: ...
    def get_metadata_item(self, key: str) -> str: ...
    def get_metadata_license(self) -> str: ...
    def get_mimetypes(self) -> list[str]: ...
    def get_name(self, locale: typing.Optional[str] = None) -> str: ...
    def get_names(self) -> dict[None, None]: ...
    def get_origin(self) -> str: ...
    def get_permissions(self) -> list[str]: ...
    def get_pkgname_default(self) -> str: ...
    def get_pkgnames(self) -> list[str]: ...
    def get_priority(self) -> int: ...
    def get_project_group(self) -> str: ...
    def get_project_license(self) -> str: ...
    def get_provides(self) -> list[Provide]: ...
    def get_release(self, version: str) -> Release: ...
    def get_release_by_version(self, version: str) -> Release: ...
    def get_release_default(self) -> Release: ...
    def get_releases(self) -> list[Release]: ...
    def get_require_by_value(self, kind: RequireKind, value: str) -> Require: ...
    def get_requires(self) -> list[Require]: ...
    def get_reviews(self) -> list[Screenshot]: ...
    def get_scope(self) -> AppScope: ...
    def get_screenshot_default(self) -> Screenshot: ...
    def get_screenshots(self) -> list[Screenshot]: ...
    def get_search_match(self) -> int: ...
    def get_source_file(self) -> str: ...
    def get_source_kind(self) -> FormatKind: ...
    def get_source_pkgname(self) -> str: ...
    def get_state(self) -> AppState: ...
    def get_suggests(self) -> list[Suggest]: ...
    def get_translations(self) -> list[Translation]: ...
    def get_trust_flags(self) -> int: ...
    def get_unique_id(self) -> str: ...
    def get_update_contact(self) -> str: ...
    def get_url_item(self, url_kind: UrlKind) -> str: ...
    def get_urls(self) -> dict[None, None]: ...
    def get_vetos(self) -> list[str]: ...
    @staticmethod
    def guess_source_kind(filename: str) -> FormatKind: ...
    def has_category(self, category: str) -> bool: ...
    def has_compulsory_for_desktop(self, desktop: str) -> bool: ...
    def has_kudo(self, kudo: str) -> bool: ...
    def has_kudo_kind(self, kudo: KudoKind) -> bool: ...
    def has_permission(self, permission: str) -> bool: ...
    def has_quirk(self, quirk: AppQuirk) -> bool: ...
    @staticmethod
    def kind_from_string(kind: str) -> AppKind: ...
    @staticmethod
    def kind_to_string(kind: AppKind) -> str: ...
    @staticmethod
    def merge_kind_from_string(merge_kind: str) -> AppMergeKind: ...
    @staticmethod
    def merge_kind_to_string(merge_kind: AppMergeKind) -> str: ...
    @classmethod
    def new(cls) -> App: ...
    def parse_data(self, data: GLib.Bytes, flags: int) -> bool: ...
    def parse_file(self, filename: str, flags: int) -> bool: ...
    def remove_category(self, category: str) -> None: ...
    def remove_format(self, format: Format) -> None: ...
    def remove_kudo(self, kudo: str) -> None: ...
    def remove_metadata(self, key: str) -> None: ...
    def remove_veto(self, description: str) -> None: ...
    @staticmethod
    def scope_from_string(scope: str) -> AppScope: ...
    @staticmethod
    def scope_to_string(scope: AppScope) -> str: ...
    def search_matches(self, search: str) -> int: ...
    def search_matches_all(self, search: str) -> int: ...
    def set_branch(self, branch: str) -> None: ...
    def set_comment(self, locale: typing.Optional[str], comment: str) -> None: ...
    def set_description(self, locale: typing.Optional[str], description: str) -> None: ...
    def set_developer_name(self, locale: typing.Optional[str], developer_name: str) -> None: ...
    def set_icon_path(self, icon_path: str) -> None: ...
    def set_id(self, id: str) -> None: ...
    def set_id_kind(self, id_kind: IdKind) -> None: ...
    def set_kind(self, kind: AppKind) -> None: ...
    def set_merge_kind(self, merge_kind: AppMergeKind) -> None: ...
    def set_metadata_license(self, metadata_license: str) -> None: ...
    def set_name(self, locale: typing.Optional[str], name: str) -> None: ...
    def set_origin(self, origin: str) -> None: ...
    def set_priority(self, priority: int) -> None: ...
    def set_project_group(self, project_group: str) -> None: ...
    def set_project_license(self, project_license: str) -> None: ...
    def set_scope(self, scope: AppScope) -> None: ...
    def set_search_match(self, search_match: int) -> None: ...
    def set_source_file(self, source_file: str) -> None: ...
    def set_source_kind(self, source_kind: FormatKind) -> None: ...
    def set_source_pkgname(self, source_pkgname: str) -> None: ...
    def set_state(self, state: AppState) -> None: ...
    def set_trust_flags(self, trust_flags: int) -> None: ...
    def set_update_contact(self, update_contact: str) -> None: ...
    @staticmethod
    def source_kind_from_string(source_kind: str) -> FormatKind: ...
    @staticmethod
    def source_kind_to_string(source_kind: FormatKind) -> str: ...
    @staticmethod
    def state_to_string(state: AppState) -> str: ...
    def subsume(self, donor: App) -> None: ...
    def subsume_full(self, donor: App, flags: int) -> None: ...
    def to_file(self, file: Gio.File, cancellable: typing.Optional[Gio.Cancellable] = None) -> bool: ...
    def to_xml(self) -> GLib.String: ...
    def validate(self, flags: int) -> list[Problem]: ...
    

class AppClass(GObject.GPointer):
    """
    :Constructors:

    ::

        AppClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Bundle(GObject.Object):
    """
    :Constructors:

    ::

        Bundle(**properties)
        new() -> AppStreamGlib.Bundle

    Object AsBundle

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def get_id(self) -> str: ...
    def get_kind(self) -> BundleKind: ...
    def get_runtime(self) -> str: ...
    def get_sdk(self) -> str: ...
    @staticmethod
    def kind_from_string(kind: str) -> BundleKind: ...
    @staticmethod
    def kind_to_string(kind: BundleKind) -> str: ...
    @classmethod
    def new(cls) -> Bundle: ...
    def set_id(self, id: str) -> None: ...
    def set_kind(self, kind: BundleKind) -> None: ...
    def set_runtime(self, runtime: str) -> None: ...
    def set_sdk(self, sdk: str) -> None: ...
    

class BundleClass(GObject.GPointer):
    """
    :Constructors:

    ::

        BundleClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Checksum(GObject.Object):
    """
    :Constructors:

    ::

        Checksum(**properties)
        new() -> AppStreamGlib.Checksum

    Object AsChecksum

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def get_filename(self) -> str: ...
    def get_kind(self) -> GLib.ChecksumType: ...
    def get_target(self) -> ChecksumTarget: ...
    def get_value(self) -> str: ...
    @classmethod
    def new(cls) -> Checksum: ...
    def set_filename(self, filename: str) -> None: ...
    def set_kind(self, kind: GLib.ChecksumType) -> None: ...
    def set_target(self, target: ChecksumTarget) -> None: ...
    def set_value(self, value: str) -> None: ...
    @staticmethod
    def target_from_string(target: str) -> ChecksumTarget: ...
    @staticmethod
    def target_to_string(target: ChecksumTarget) -> str: ...
    

class ChecksumClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ChecksumClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class ContentRating(GObject.Object):
    """
    :Constructors:

    ::

        ContentRating(**properties)
        new() -> AppStreamGlib.ContentRating

    Object AsContentRating

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def add_attribute(self, id: str, value: ContentRatingValue) -> None: ...
    @staticmethod
    def attribute_from_csm_age(id: str, age: int) -> ContentRatingValue: ...
    @staticmethod
    def attribute_get_description(id: str, value: ContentRatingValue) -> str: ...
    @staticmethod
    def attribute_to_csm_age(id: str, value: ContentRatingValue) -> int: ...
    @staticmethod
    def get_all_rating_ids() -> list[str]: ...
    def get_kind(self) -> str: ...
    def get_minimum_age(self) -> int: ...
    def get_rating_ids(self) -> list[str]: ...
    def get_value(self, id: str) -> ContentRatingValue: ...
    @classmethod
    def new(cls) -> ContentRating: ...
    def set_kind(self, kind: str) -> None: ...
    @staticmethod
    def system_format_age(system: ContentRatingSystem, age: int) -> typing.Optional[str]: ...
    @staticmethod
    def system_from_locale(locale: str) -> ContentRatingSystem: ...
    @staticmethod
    def system_get_csm_ages(system: ContentRatingSystem) -> list[int]: ...
    @staticmethod
    def system_get_formatted_ages(system: ContentRatingSystem) -> list[str]: ...
    @staticmethod
    def system_to_string(system: ContentRatingSystem) -> typing.Optional[str]: ...
    @staticmethod
    def value_from_string(value: str) -> ContentRatingValue: ...
    @staticmethod
    def value_to_string(value: ContentRatingValue) -> str: ...
    

class ContentRatingClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ContentRatingClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Format(GObject.Object):
    """
    :Constructors:

    ::

        Format(**properties)
        new() -> AppStreamGlib.Format

    Object AsFormat

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def equal(self, format2: Format) -> bool: ...
    def get_filename(self) -> str: ...
    def get_kind(self) -> FormatKind: ...
    @staticmethod
    def guess_kind(filename: str) -> FormatKind: ...
    @staticmethod
    def kind_from_string(kind: str) -> FormatKind: ...
    @staticmethod
    def kind_to_string(kind: FormatKind) -> str: ...
    @classmethod
    def new(cls) -> Format: ...
    def set_filename(self, filename: str) -> None: ...
    def set_kind(self, kind: FormatKind) -> None: ...
    

class FormatClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FormatClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Icon(GObject.Object):
    """
    :Constructors:

    ::

        Icon(**properties)
        new() -> AppStreamGlib.Icon

    Object AsIcon

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def convert_to_kind(self, kind: IconKind) -> bool: ...
    @staticmethod
    def error_quark() -> int: ...
    def get_filename(self) -> str: ...
    def get_height(self) -> int: ...
    def get_kind(self) -> IconKind: ...
    def get_name(self) -> str: ...
    def get_pixbuf(self) -> GdkPixbuf.Pixbuf: ...
    def get_prefix(self) -> str: ...
    def get_scale(self) -> int: ...
    def get_url(self) -> str: ...
    def get_width(self) -> int: ...
    @staticmethod
    def kind_from_string(icon_kind: str) -> IconKind: ...
    @staticmethod
    def kind_to_string(icon_kind: IconKind) -> str: ...
    def load(self, flags: IconLoadFlags) -> bool: ...
    @classmethod
    def new(cls) -> Icon: ...
    def set_filename(self, filename: str) -> None: ...
    def set_height(self, height: int) -> None: ...
    def set_kind(self, kind: IconKind) -> None: ...
    def set_name(self, name: str) -> None: ...
    def set_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def set_prefix(self, prefix: str) -> None: ...
    def set_scale(self, scale: int) -> None: ...
    def set_url(self, url: str) -> None: ...
    def set_width(self, width: int) -> None: ...
    

class IconClass(GObject.GPointer):
    """
    :Constructors:

    ::

        IconClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Image(GObject.Object):
    """
    :Constructors:

    ::

        Image(**properties)
        new() -> AppStreamGlib.Image

    Object AsImage

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def equal(self, image2: Image) -> bool: ...
    def get_basename(self) -> str: ...
    def get_height(self) -> int: ...
    def get_kind(self) -> ImageKind: ...
    def get_locale(self) -> str: ...
    def get_md5(self) -> str: ...
    def get_pixbuf(self) -> GdkPixbuf.Pixbuf: ...
    def get_url(self) -> str: ...
    def get_width(self) -> int: ...
    @staticmethod
    def kind_from_string(kind: str) -> ImageKind: ...
    @staticmethod
    def kind_to_string(kind: ImageKind) -> str: ...
    def load_filename(self, filename: str) -> bool: ...
    def load_filename_full(self, filename: str, dest_size: int, src_size_min: int, flags: ImageLoadFlags) -> bool: ...
    @classmethod
    def new(cls) -> Image: ...
    def save_filename(self, filename: str, width: int, height: int, flags: ImageSaveFlags) -> bool: ...
    def save_pixbuf(self, width: int, height: int, flags: ImageSaveFlags) -> GdkPixbuf.Pixbuf: ...
    def set_basename(self, basename: str) -> None: ...
    def set_height(self, height: int) -> None: ...
    def set_kind(self, kind: ImageKind) -> None: ...
    def set_locale(self, locale: str) -> None: ...
    def set_pixbuf(self, pixbuf: GdkPixbuf.Pixbuf) -> None: ...
    def set_url(self, url: str) -> None: ...
    def set_width(self, width: int) -> None: ...
    

class ImageClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ImageClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Launchable(GObject.Object):
    """
    :Constructors:

    ::

        Launchable(**properties)
        new() -> AppStreamGlib.Launchable

    Object AsLaunchable

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def get_kind(self) -> LaunchableKind: ...
    def get_value(self) -> str: ...
    @staticmethod
    def kind_from_string(kind: str) -> LaunchableKind: ...
    @staticmethod
    def kind_to_string(kind: LaunchableKind) -> str: ...
    @classmethod
    def new(cls) -> Launchable: ...
    def set_kind(self, kind: LaunchableKind) -> None: ...
    def set_value(self, value: str) -> None: ...
    

class LaunchableClass(GObject.GPointer):
    """
    :Constructors:

    ::

        LaunchableClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Problem(GObject.Object):
    """
    :Constructors:

    ::

        Problem(**properties)
        new() -> AppStreamGlib.Problem

    Object AsProblem

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def get_kind(self) -> ProblemKind: ...
    def get_line_number(self) -> int: ...
    def get_message(self) -> str: ...
    @staticmethod
    def kind_to_string(kind: ProblemKind) -> str: ...
    @classmethod
    def new(cls) -> Problem: ...
    def set_kind(self, kind: ProblemKind) -> None: ...
    def set_line_number(self, line_number: int) -> None: ...
    def set_message(self, message: str) -> None: ...
    

class ProblemClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ProblemClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Provide(GObject.Object):
    """
    :Constructors:

    ::

        Provide(**properties)
        new() -> AppStreamGlib.Provide

    Object AsProvide

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def get_kind(self) -> ProvideKind: ...
    def get_value(self) -> str: ...
    @staticmethod
    def kind_from_string(kind: str) -> ProvideKind: ...
    @staticmethod
    def kind_to_string(kind: ProvideKind) -> str: ...
    @classmethod
    def new(cls) -> Provide: ...
    def set_kind(self, kind: ProvideKind) -> None: ...
    def set_value(self, value: str) -> None: ...
    

class ProvideClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ProvideClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Release(GObject.Object):
    """
    :Constructors:

    ::

        Release(**properties)
        new() -> AppStreamGlib.Release

    Object AsRelease

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def add_checksum(self, checksum: Checksum) -> None: ...
    def add_location(self, location: str) -> None: ...
    def get_blob(self, filename: str) -> GLib.Bytes: ...
    def get_checksum_by_fn(self, fn: str) -> Checksum: ...
    def get_checksum_by_target(self, target: ChecksumTarget) -> Checksum: ...
    def get_checksums(self) -> list[Checksum]: ...
    def get_description(self, locale: typing.Optional[str] = None) -> str: ...
    def get_install_duration(self) -> int: ...
    def get_kind(self) -> ReleaseKind: ...
    def get_location_default(self) -> str: ...
    def get_locations(self) -> list[str]: ...
    def get_size(self, kind: SizeKind) -> int: ...
    def get_state(self) -> ReleaseState: ...
    def get_timestamp(self) -> int: ...
    def get_urgency(self) -> UrgencyKind: ...
    def get_url(self, url_kind: UrlKind) -> str: ...
    def get_version(self) -> str: ...
    @staticmethod
    def kind_from_string(kind_str: str) -> ReleaseKind: ...
    @staticmethod
    def kind_to_string(kind: ReleaseKind) -> str: ...
    @classmethod
    def new(cls) -> Release: ...
    def set_blob(self, filename: str, blob: GLib.Bytes) -> None: ...
    def set_description(self, locale: typing.Optional[str], description: str) -> None: ...
    def set_install_duration(self, install_duration: int) -> None: ...
    def set_kind(self, kind: ReleaseKind) -> None: ...
    def set_size(self, kind: SizeKind, size: int) -> None: ...
    def set_state(self, state: ReleaseState) -> None: ...
    def set_timestamp(self, timestamp: int) -> None: ...
    def set_urgency(self, urgency: UrgencyKind) -> None: ...
    def set_url(self, url_kind: UrlKind, url: str) -> None: ...
    def set_version(self, version: str) -> None: ...
    @staticmethod
    def state_from_string(state: str) -> ReleaseState: ...
    @staticmethod
    def state_to_string(state: ReleaseState) -> str: ...
    def vercmp(self, rel2: Release) -> int: ...
    

class ReleaseClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ReleaseClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Require(GObject.Object):
    """
    :Constructors:

    ::

        Require(**properties)
        new() -> AppStreamGlib.Require

    Object AsRequire

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    @staticmethod
    def compare_from_string(compare: str) -> RequireCompare: ...
    @staticmethod
    def compare_to_string(compare: RequireCompare) -> str: ...
    def equal(self, require2: Require) -> bool: ...
    def get_compare(self) -> RequireCompare: ...
    def get_kind(self) -> RequireKind: ...
    def get_value(self) -> str: ...
    def get_version(self) -> str: ...
    @staticmethod
    def kind_from_string(kind: str) -> RequireKind: ...
    @staticmethod
    def kind_to_string(kind: RequireKind) -> str: ...
    @classmethod
    def new(cls) -> Require: ...
    def set_compare(self, compare: RequireCompare) -> None: ...
    def set_kind(self, kind: RequireKind) -> None: ...
    def set_value(self, value: str) -> None: ...
    def set_version(self, version: str) -> None: ...
    def version_compare(self, version: str) -> bool: ...
    

class RequireClass(GObject.GPointer):
    """
    :Constructors:

    ::

        RequireClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Review(GObject.Object):
    """
    :Constructors:

    ::

        Review(**properties)
        new() -> AppStreamGlib.Review

    Object AsReview

    Properties from AsReview:
      id -> gchararray: id
      summary -> gchararray: summary
      description -> gchararray: description
      locale -> gchararray: locale
      rating -> gint: rating
      version -> gchararray: version
      reviewer-id -> gchararray: reviewer-id
      reviewer-name -> gchararray: reviewer-name
      date -> AsReview: date
      flags -> guint64: flags

    Signals from GObject:
      notify (GParam)
    """
    class Props:
        date: Review
        description: str
        flags: int
        id: str
        locale: str
        rating: int
        reviewer_id: str
        reviewer_name: str
        summary: str
        version: str
    props: Props = ...
    parent_instance: GObject.Object = ...
    def __init__(self, date: Review = ...,
                 description: str = ...,
                 flags: int = ...,
                 id: str = ...,
                 locale: str = ...,
                 rating: int = ...,
                 reviewer_id: str = ...,
                 reviewer_name: str = ...,
                 summary: str = ...,
                 version: str = ...) -> None: ...
    def add_flags(self, flags: ReviewFlags) -> None: ...
    def add_metadata(self, key: str, value: str) -> None: ...
    def equal(self, review2: Review) -> bool: ...
    def get_date(self) -> GLib.DateTime: ...
    def get_description(self) -> str: ...
    def get_flags(self) -> ReviewFlags: ...
    def get_id(self) -> str: ...
    def get_locale(self) -> str: ...
    def get_metadata_item(self, key: str) -> str: ...
    def get_priority(self) -> int: ...
    def get_rating(self) -> int: ...
    def get_reviewer_id(self) -> str: ...
    def get_reviewer_name(self) -> str: ...
    def get_summary(self) -> str: ...
    def get_version(self) -> str: ...
    @classmethod
    def new(cls) -> Review: ...
    def set_date(self, date: GLib.DateTime) -> None: ...
    def set_description(self, description: str) -> None: ...
    def set_flags(self, flags: ReviewFlags) -> None: ...
    def set_id(self, id: str) -> None: ...
    def set_locale(self, locale: str) -> None: ...
    def set_priority(self, priority: int) -> None: ...
    def set_rating(self, rating: int) -> None: ...
    def set_reviewer_id(self, reviewer_id: str) -> None: ...
    def set_reviewer_name(self, reviewer_name: str) -> None: ...
    def set_summary(self, summary: str) -> None: ...
    def set_version(self, version: str) -> None: ...
    

class ReviewClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ReviewClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Screenshot(GObject.Object):
    """
    :Constructors:

    ::

        Screenshot(**properties)
        new() -> AppStreamGlib.Screenshot

    Object AsScreenshot

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def add_image(self, image: Image) -> None: ...
    def equal(self, screenshot2: Screenshot) -> bool: ...
    def get_caption(self, locale: typing.Optional[str] = None) -> str: ...
    def get_image(self, width: int, height: int) -> Image: ...
    def get_image_for_locale(self, locale: typing.Optional[str], width: int, height: int) -> Image: ...
    def get_images(self) -> list[Image]: ...
    def get_images_for_locale(self, locale: str) -> list[Image]: ...
    def get_kind(self) -> ScreenshotKind: ...
    def get_priority(self) -> int: ...
    def get_source(self) -> Image: ...
    @staticmethod
    def kind_from_string(kind: str) -> ScreenshotKind: ...
    @staticmethod
    def kind_to_string(kind: ScreenshotKind) -> str: ...
    @classmethod
    def new(cls) -> Screenshot: ...
    def set_caption(self, locale: typing.Optional[str], caption: str) -> None: ...
    def set_kind(self, kind: ScreenshotKind) -> None: ...
    def set_priority(self, priority: int) -> None: ...
    

class ScreenshotClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ScreenshotClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Store(GObject.Object):
    """
    :Constructors:

    ::

        Store(**properties)
        new() -> AppStreamGlib.Store

    Object AsStore

    Signals from AsStore:
      changed ()
      app-added (AsApp)
      app-removed (AsApp)
      app-changed (AsApp)

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def add_app(self, app: App) -> None: ...
    def add_apps(self, apps: typing.Sequence[App]) -> None: ...
    def add_filter(self, kind: AppKind) -> None: ...
    def add_metadata_index(self, key: str) -> None: ...
    def convert_icons(self, kind: IconKind) -> bool: ...
    def do_app_added(self, app: App) -> None: ...
    def do_app_changed(self, app: App) -> None: ...
    def do_app_removed(self, app: App) -> None: ...
    def do_changed(self) -> None: ...
    def dup_apps(self) -> list[App]: ...
    def dup_apps_by_id_merge(self, id: str) -> list[App]: ...
    @staticmethod
    def error_quark() -> int: ...
    def from_bytes(self, bytes: GLib.Bytes, cancellable: typing.Optional[Gio.Cancellable] = None) -> bool: ...
    def from_file(self, file: Gio.File, icon_root: typing.Optional[str] = None, cancellable: typing.Optional[Gio.Cancellable] = None) -> bool: ...
    def from_xml(self, data: str, icon_root: typing.Optional[str] = None) -> bool: ...
    def get_add_flags(self) -> int: ...
    def get_api_version(self) -> float: ...
    def get_app_by_id(self, id: str) -> App: ...
    def get_app_by_id_ignore_prefix(self, id: str) -> App: ...
    def get_app_by_id_with_fallbacks(self, id: str) -> App: ...
    def get_app_by_launchable(self, kind: LaunchableKind, value: str) -> App: ...
    def get_app_by_pkgname(self, pkgname: str) -> App: ...
    def get_app_by_pkgnames(self, pkgnames: str) -> App: ...
    def get_app_by_provide(self, kind: ProvideKind, value: str) -> App: ...
    def get_app_by_unique_id(self, unique_id: str, search_flags: int) -> App: ...
    def get_apps(self) -> list[App]: ...
    def get_apps_by_id(self, id: str) -> list[App]: ...
    def get_apps_by_id_merge(self, id: str) -> list[App]: ...
    def get_apps_by_metadata(self, key: str, value: str) -> list[App]: ...
    def get_apps_by_provide(self, kind: ProvideKind, value: str) -> list[App]: ...
    def get_builder_id(self) -> str: ...
    def get_destdir(self) -> str: ...
    def get_origin(self) -> str: ...
    def get_search_match(self) -> int: ...
    def get_size(self) -> int: ...
    def get_version(self) -> str: ...
    def get_watch_flags(self) -> int: ...
    def load(self, flags: int, cancellable: typing.Optional[Gio.Cancellable] = None) -> bool: ...
    def load_async(self, flags: StoreLoadFlags, cancellable: typing.Optional[Gio.Cancellable] = None, callback: typing.Optional[typing.Callable[..., None]] = None, *user_data: typing.Any) -> None: ...
    def load_finish(self, result: Gio.AsyncResult) -> bool: ...
    def load_path(self, path: str, cancellable: typing.Optional[Gio.Cancellable] = None) -> bool: ...
    def load_path_async(self, path: str, cancellable: typing.Optional[Gio.Cancellable] = None, callback: typing.Optional[typing.Callable[..., None]] = None, *user_data: typing.Any) -> None: ...
    def load_path_finish(self, result: Gio.AsyncResult) -> bool: ...
    def load_search_cache(self) -> None: ...
    @classmethod
    def new(cls) -> Store: ...
    def remove_all(self) -> None: ...
    def remove_app(self, app: App) -> None: ...
    def remove_app_by_id(self, id: str) -> None: ...
    def remove_apps_with_veto(self) -> None: ...
    def remove_filter(self, kind: AppKind) -> None: ...
    def set_add_flags(self, add_flags: int) -> None: ...
    def set_api_version(self, api_version: float) -> None: ...
    def set_builder_id(self, builder_id: str) -> None: ...
    def set_destdir(self, destdir: str) -> None: ...
    def set_origin(self, origin: str) -> None: ...
    def set_search_match(self, search_match: int) -> None: ...
    def set_version(self, api_version: str) -> None: ...
    def set_watch_flags(self, watch_flags: int) -> None: ...
    def to_file(self, file: Gio.File, flags: int, cancellable: typing.Optional[Gio.Cancellable] = None) -> bool: ...
    def to_xml(self, flags: int) -> GLib.String: ...
    def validate(self, flags: int) -> list[Problem]: ...
    

class StoreClass(GObject.GPointer):
    """
    :Constructors:

    ::

        StoreClass()
    """
    parent_class: GObject.ObjectClass = ...
    changed: typing.Callable[[Store], None] = ...
    app_added: typing.Callable[[Store, App], None] = ...
    app_removed: typing.Callable[[Store, App], None] = ...
    app_changed: typing.Callable[[Store, App], None] = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...

class Suggest(GObject.Object):
    """
    :Constructors:

    ::

        Suggest(**properties)
        new() -> AppStreamGlib.Suggest

    Object AsSuggest

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def add_id(self, id: str) -> None: ...
    def get_ids(self) -> list[str]: ...
    def get_kind(self) -> SuggestKind: ...
    @staticmethod
    def kind_from_string(kind: str) -> SuggestKind: ...
    @staticmethod
    def kind_to_string(kind: SuggestKind) -> str: ...
    @classmethod
    def new(cls) -> Suggest: ...
    def set_kind(self, kind: SuggestKind) -> None: ...
    

class SuggestClass(GObject.GPointer):
    """
    :Constructors:

    ::

        SuggestClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class Translation(GObject.Object):
    """
    :Constructors:

    ::

        Translation(**properties)
        new() -> AppStreamGlib.Translation

    Object AsTranslation

    Signals from GObject:
      notify (GParam)
    """
    parent_instance: GObject.Object = ...
    def get_id(self) -> str: ...
    def get_kind(self) -> TranslationKind: ...
    @staticmethod
    def kind_from_string(kind: str) -> TranslationKind: ...
    @staticmethod
    def kind_to_string(kind: TranslationKind) -> str: ...
    @classmethod
    def new(cls) -> Translation: ...
    def set_id(self, id: str) -> None: ...
    def set_kind(self, kind: TranslationKind) -> None: ...
    

class TranslationClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TranslationClass()
    """
    parent_class: GObject.ObjectClass = ...
    _as_reserved1: None = ...
    _as_reserved2: None = ...
    _as_reserved3: None = ...
    _as_reserved4: None = ...
    _as_reserved5: None = ...
    _as_reserved6: None = ...
    _as_reserved7: None = ...
    _as_reserved8: None = ...

class AppParseFlags(GObject.GFlags):
    ADD_ALL_METADATA = 64
    ALLOW_VETO = 16
    APPEND_DATA = 8
    CONVERT_TRANSLATABLE = 4
    KEEP_COMMENTS = 2
    NONE = 0
    ONLY_NATIVE_LANGS = 128
    USE_FALLBACKS = 32
    USE_HEURISTICS = 1

class AppQuirk(GObject.GFlags):
    COMPULSORY = 2
    DEVELOPER_VERIFIED = 2048
    HAS_SHORTCUT = 64
    HAS_SOURCE = 4
    IS_PROXY = 512
    MATCH_ANY_PREFIX = 8
    NEEDS_REBOOT = 16
    NEEDS_USER_ACTION = 256
    NONE = 0
    NOT_LAUNCHABLE = 128
    NOT_REVIEWABLE = 32
    PROVENANCE = 1
    REMOVABLE_HARDWARE = 1024

class AppSearchMatch(GObject.GFlags):
    COMMENT = 8
    DESCRIPTION = 4
    ID = 64
    KEYWORD = 32
    MIMETYPE = 1
    NAME = 16
    NONE = 0
    ORIGIN = 128
    PKGNAME = 2

class AppSubsumeFlags(GObject.GFlags):
    AGREEMENTS = 0
    BOTH_WAYS = 2
    BRANCH = 536870912
    BUNDLES = 32
    CATEGORIES = 512
    COMMENT = 4194304
    COMPULSORY = 4096
    CONTENT_RATINGS = 32768
    DESCRIPTION = 16777216
    DEVELOPER_NAME = 8388608
    EXTENDS = 2048
    FORMATS = 268435456
    ICONS = 131072
    KEYWORDS = 134217728
    KIND = 8
    KUDOS = 256
    LANGUAGES = 1048576
    LAUNCHABLES = 0
    METADATA = 33554432
    METADATA_LICENSE = 2147483648
    MIMETYPES = 262144
    NAME = 2097152
    NONE = 0
    NO_OVERWRITE = 1
    ORIGIN = 1073741824
    PERMISSIONS = 1024
    PROJECT_GROUP = 0
    PROJECT_LICENSE = 0
    PROVIDES = 65536
    RELEASES = 128
    REPLACE = 4
    REVIEWS = 16384
    SCREENSHOTS = 8192
    SOURCE_KIND = 0
    STATE = 16
    SUGGESTS = 0
    TRANSLATIONS = 64
    URL = 67108864
    VETOS = 524288

class InfLoadFlags(GObject.GFlags):
    CASE_INSENSITIVE = 2
    NONE = 0
    STRICT = 1

class MarkupConvertFlag(GObject.GFlags):
    IGNORE_ERRORS = 1
    NONE = 0

class NodeFromXmlFlags(GObject.GFlags):
    KEEP_COMMENTS = 2
    LITERAL_TEXT = 1
    NONE = 0
    ONLY_NATIVE_LANGS = 4

class ReviewFlags(GObject.GFlags):
    NONE = 0
    SELF = 1
    VOTED = 2

class StoreAddFlags(GObject.GFlags):
    NONE = 0
    ONLY_NATIVE_LANGS = 8
    PREFER_LOCAL = 1
    USE_MERGE_HEURISTIC = 4
    USE_UNIQUE_ID = 2

class StoreLoadFlags(GObject.GFlags):
    ALLOW_VETO = 32
    APPDATA = 8
    APP_INFO_SYSTEM = 1
    APP_INFO_USER = 2
    APP_INSTALL = 4
    DESKTOP = 16
    FLATPAK_SYSTEM = 128
    FLATPAK_USER = 64
    IGNORE_INVALID = 256
    NONE = 0
    ONLY_MERGE_APPS = 1024
    ONLY_UNCOMPRESSED = 512

class UniqueIdMatchFlags(GObject.GFlags):
    BRANCH = 32
    BUNDLE_KIND = 2
    ID = 16
    KIND = 8
    NONE = 0
    ORIGIN = 4
    SCOPE = 1

class UtilsFindIconFlag(GObject.GFlags):
    HI_DPI = 1
    NONE = 0

class VersionCompareFlag(GObject.GFlags):
    NONE = 0
    USE_HEURISTICS = 1

class VersionParseFlag(GObject.GFlags):
    NONE = 0
    USE_BCD = 2
    USE_TRIPLET = 1

class AgreementKind(GObject.GEnum):
    EULA = 2
    GENERIC = 1
    PRIVACY = 3
    UNKNOWN = 0

class AppError(GObject.GEnum):
    FAILED = 0
    INVALID_TYPE = 1

class AppKind(GObject.GEnum):
    ADDON = 7
    CODEC = 3
    CONSOLE = 15
    DESKTOP = 1
    DRIVER = 16
    FIRMWARE = 8
    FONT = 2
    GENERIC = 10
    ICON_THEME = 17
    INPUT_METHOD = 4
    LOCALIZATION = 14
    OS_UPDATE = 11
    OS_UPGRADE = 12
    RUNTIME = 9
    SHELL_EXTENSION = 13
    SOURCE = 6
    UNKNOWN = 0
    WEB_APP = 5

class AppMergeKind(GObject.GEnum):
    APPEND = 3
    NONE = 1
    REPLACE = 2
    UNKNOWN = 0

class AppScope(GObject.GEnum):
    SYSTEM = 2
    UNKNOWN = 0
    USER = 1

class AppState(GObject.GEnum):
    AVAILABLE = 2
    AVAILABLE_LOCAL = 3
    INSTALLED = 1
    INSTALLING = 7
    PURCHASABLE = 10
    PURCHASING = 11
    QUEUED_FOR_INSTALL = 6
    REMOVING = 8
    UNAVAILABLE = 5
    UNKNOWN = 0
    UPDATABLE = 4
    UPDATABLE_LIVE = 9

class AppTrustFlags(GObject.GEnum):
    CHECK_DUPLICATES = 1
    CHECK_VALID_UTF8 = 2
    COMPLETE = 0

class AppValidateFlags(GObject.GEnum):
    ALL_APPS = 8
    NONE = 0
    NO_NETWORK = 4
    RELAX = 1
    STRICT = 2

class BundleKind(GObject.GEnum):
    APPIMAGE = 6
    CABINET = 5
    FLATPAK = 2
    LIMBA = 1
    PACKAGE = 4
    SNAP = 3
    UNKNOWN = 0

class ChecksumTarget(GObject.GEnum):
    CONTAINER = 1
    CONTENT = 2
    DEVICE = 4
    SIGNATURE = 3
    UNKNOWN = 0

class ContentRatingSystem(GObject.GEnum):
    ACB = 2
    CERO = 9
    DJCTQ = 3
    ESRA = 8
    ESRB = 14
    GRAC = 13
    GSRR = 4
    IARC = 15
    INCAA = 1
    KAVI = 6
    MDA = 12
    OFLCNZ = 10
    PEGI = 5
    RUSSIA = 11
    UNKNOWN = 0
    USK = 7

class ContentRatingValue(GObject.GEnum):
    INTENSE = 4
    MILD = 2
    MODERATE = 3
    NONE = 1
    UNKNOWN = 0

class FormatKind(GObject.GEnum):
    APPDATA = 3
    APPSTREAM = 1
    DESKTOP = 2
    METAINFO = 4
    UNKNOWN = 0

class IconError(GObject.GEnum):
    FAILED = 0

class IconKind(GObject.GEnum):
    CACHED = 2
    EMBEDDED = 4
    LOCAL = 5
    REMOTE = 3
    STOCK = 1
    UNKNOWN = 0

class IconLoadFlags(GObject.GEnum):
    NONE = 0
    SEARCH_SIZE = 1

class IdKind(GObject.GEnum):
    ADDON = 7
    CODEC = 3
    DESKTOP = 1
    FIRMWARE = 8
    FONT = 2
    GENERIC = 10
    INPUT_METHOD = 4
    RUNTIME = 9
    SOURCE = 6
    UNKNOWN = 0
    WEB_APP = 5

class ImageKind(GObject.GEnum):
    SOURCE = 1
    THUMBNAIL = 2
    UNKNOWN = 0

class ImageLoadFlags(GObject.GEnum):
    ALWAYS_RESIZE = 16
    NONE = 0
    ONLY_SUPPORTED = 8
    SET_BASENAME = 2
    SET_CHECKSUM = 4
    SHARPEN = 1

class ImageSaveFlags(GObject.GEnum):
    BLUR = 4
    NONE = 0
    PAD_16_9 = 1
    SHARPEN = 2

class InfError(GObject.GEnum):
    FAILED = 0
    INVALID_TYPE = 1
    NOT_FOUND = 2

class KudoKind(GObject.GEnum):
    APP_MENU = 3
    HIGH_CONTRAST = 6
    HI_DPI_ICON = 7
    MODERN_TOOLKIT = 4
    NOTIFICATIONS = 5
    SEARCH_PROVIDER = 1
    UNKNOWN = 0
    USER_DOCS = 2

class LaunchableKind(GObject.GEnum):
    COCKPIT_MANIFEST = 3
    DESKTOP_ID = 1
    SERVICE = 2
    UNKNOWN = 0
    URL = 4

class MarkupConvertFormat(GObject.GEnum):
    APPSTREAM = 3
    HTML = 4
    MARKDOWN = 1
    NULL = 2
    SIMPLE = 0

class NodeError(GObject.GEnum):
    FAILED = 0
    INVALID_MARKUP = 1
    NO_SUPPORT = 2

class NodeInsertFlags(GObject.GEnum):
    BASE64_ENCODED = 32
    DEDUPE_LANG = 8
    MARK_TRANSLATABLE = 16
    NONE = 0
    NO_MARKUP = 4
    PRE_ESCAPED = 1
    SWAPPED = 2

class NodeToXmlFlags(GObject.GEnum):
    ADD_HEADER = 1
    FORMAT_INDENT = 4
    FORMAT_MULTILINE = 2
    INCLUDE_SIBLINGS = 8
    NONE = 0
    SORT_CHILDREN = 16

class ProblemKind(GObject.GEnum):
    ASPECT_RATIO_INCORRECT = 13
    ATTRIBUTE_INVALID = 5
    ATTRIBUTE_MISSING = 4
    DUPLICATE_DATA = 9
    FILE_INVALID = 12
    MARKUP_INVALID = 6
    RESOLUTION_INCORRECT = 14
    STYLE_INCORRECT = 7
    TAG_DUPLICATED = 1
    TAG_INVALID = 3
    TAG_MISSING = 2
    TRANSLATIONS_REQUIRED = 8
    UNKNOWN = 0
    URL_NOT_FOUND = 11
    VALUE_MISSING = 10

class ProvideKind(GObject.GEnum):
    BINARY = 2
    DBUS_SESSION = 8
    DBUS_SYSTEM = 9
    FIRMWARE_FLASHED = 10
    FIRMWARE_RUNTIME = 5
    FONT = 3
    ID = 11
    LIBRARY = 1
    MODALIAS = 4
    PYTHON2 = 6
    PYTHON3 = 7
    UNKNOWN = 0

class ReleaseKind(GObject.GEnum):
    DEVELOPMENT = 2
    STABLE = 1
    UNKNOWN = 0

class ReleaseState(GObject.GEnum):
    AVAILABLE = 2
    INSTALLED = 1
    UNKNOWN = 0

class RequireCompare(GObject.GEnum):
    EQ = 1
    GE = 6
    GLOB = 7
    GT = 4
    LE = 5
    LT = 3
    NE = 2
    REGEX = 8
    UNKNOWN = 0

class RequireKind(GObject.GEnum):
    FIRMWARE = 2
    HARDWARE = 3
    ID = 1
    KERNEL = 5
    MEMORY = 6
    MODALIAS = 4
    UNKNOWN = 0

class ScreenshotKind(GObject.GEnum):
    DEFAULT = 2
    NORMAL = 1
    UNKNOWN = 0

class SizeKind(GObject.GEnum):
    DOWNLOAD = 2
    INSTALLED = 1
    UNKNOWN = 0

class StoreError(GObject.GEnum):
    FAILED = 0

class StoreSearchFlags(GObject.GEnum):
    NONE = 0
    USE_WILDCARDS = 1

class StoreWatchFlags(GObject.GEnum):
    ADDED = 1
    NONE = 0
    REMOVED = 2

class SuggestKind(GObject.GEnum):
    HEURISTIC = 2
    UNKNOWN = 0
    UPSTREAM = 1

class Tag(GObject.GEnum):
    AGREEMENT = 60
    AGREEMENT_SECTION = 61
    ARCH = 32
    ARCHITECTURES = 31
    BINARY = 66
    BUNDLE = 42
    CAPTION = 24
    CATEGORIES = 10
    CATEGORY = 11
    CHECKSUM = 46
    COMPONENT = 2
    COMPONENTS = 1
    COMPULSORY_FOR_DESKTOP = 22
    CONTENT_ATTRIBUTE = 50
    CONTENT_RATING = 49
    CUSTOM = 58
    DBUS = 68
    DESCRIPTION = 7
    DEVELOPER_NAME = 36
    EXTENDS = 35
    FONT = 67
    ICON = 9
    ID = 3
    IMAGE = 21
    KEYWORD = 13
    KEYWORDS = 12
    KUDO = 38
    KUDOS = 37
    LANG = 26
    LANGUAGES = 25
    LAUNCHABLE = 59
    LI = 63
    LIBRARY = 70
    LOCATION = 45
    METADATA = 27
    METADATA_LICENSE = 33
    MIMETYPE = 15
    MIMETYPES = 14
    MODALIAS = 69
    NAME = 5
    OL = 65
    P = 62
    PERMISSION = 44
    PERMISSIONS = 43
    PKGNAME = 4
    PRIORITY = 23
    PROJECT_GROUP = 16
    PROJECT_LICENSE = 17
    PROVIDES = 34
    RELEASE = 30
    RELEASES = 29
    REQUIRES = 57
    REVIEW = 53
    REVIEWER_ID = 55
    REVIEWER_NAME = 54
    REVIEWS = 52
    SCREENSHOT = 18
    SCREENSHOTS = 19
    SIZE = 47
    SOURCE_PKGNAME = 39
    SUGGESTS = 56
    SUMMARY = 6
    TRANSLATION = 48
    UL = 64
    UNKNOWN = 0
    UPDATE_CONTACT = 20
    URL = 8
    VALUE = 28
    VERSION = 51
    VETO = 41
    VETOS = 40

class TagFlags(GObject.GEnum):
    NONE = 0
    USE_FALLBACKS = 1
    USE_TRANSLATED = 2

class TranslationKind(GObject.GEnum):
    GETTEXT = 1
    QT = 2
    UNKNOWN = 0

class UrgencyKind(GObject.GEnum):
    CRITICAL = 4
    HIGH = 3
    LOW = 1
    MEDIUM = 2
    UNKNOWN = 0

class UrlKind(GObject.GEnum):
    BUGTRACKER = 2
    CONTACT = 10
    CONTRIBUTE = 12
    DETAILS = 8
    DONATION = 4
    FAQ = 3
    HELP = 5
    HOMEPAGE = 1
    MISSING = 6
    SOURCE = 9
    TRANSLATE = 7
    UNKNOWN = 0
    VCS_BROWSER = 11

class UtilsError(GObject.GEnum):
    FAILED = 0
    INVALID_TYPE = 1

class UtilsLocation(GObject.GEnum):
    CACHE = 1
    SHARED = 0
    USER = 2

