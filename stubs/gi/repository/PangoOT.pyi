import typing

from gi.repository import GObject
from gi.repository import Pango
from gi.repository import PangoFc
from gi.repository import freetype2
T = typing.TypeVar("T")

ALL_GLYPHS: int = 65535
DEFAULT_LANGUAGE: int = 65535
NO_FEATURE: int = 65535
NO_SCRIPT: int = 65535
_namespace: str = "PangoOT"
_version: str = "1.0"

def tag_from_language(language: typing.Optional[Pango.Language] = None) -> int: ...
def tag_from_script(script: Pango.Script) -> int: ...
def tag_to_language(language_tag: int) -> Pango.Language: ...
def tag_to_script(script_tag: int) -> Pango.Script: ...

class Buffer(GObject.GBoxed):
    """
    :Constructors:

    ::

        new(font:PangoFc.Font) -> PangoOT.Buffer
    """
    def add_glyph(self, glyph: int, properties: int, cluster: int) -> None: ...
    def clear(self) -> None: ...
    def destroy(self) -> None: ...
    def get_glyphs(self) -> list[Glyph]: ...
    @classmethod
    def new(cls, font: PangoFc.Font) -> Buffer: ...
    def output(self, glyphs: Pango.GlyphString) -> None: ...
    def set_rtl(self, rtl: bool) -> None: ...
    def set_zero_width_marks(self, zero_width_marks: bool) -> None: ...
    

class FeatureMap(GObject.GPointer):
    """
    :Constructors:

    ::

        FeatureMap()
    """
    feature_name: list[int] = ...
    property_bit: int = ...

class Glyph(GObject.GPointer):
    """
    :Constructors:

    ::

        Glyph()
    """
    glyph: int = ...
    properties: int = ...
    cluster: int = ...
    component: int = ...
    ligID: int = ...
    internal: int = ...

class Info(GObject.Object):
    """
    :Constructors:

    ::

        Info(**properties)

    Object PangoOTInfo

    Signals from GObject:
      notify (GParam)
    """
    def find_feature(self, table_type: TableType, feature_tag: int, script_index: int, language_index: int) -> typing.Tuple[bool, int]: ...
    def find_language(self, table_type: TableType, script_index: int, language_tag: int) -> typing.Tuple[bool, int, int]: ...
    def find_script(self, table_type: TableType, script_tag: int) -> typing.Tuple[bool, int]: ...
    @staticmethod
    def get(face: freetype2.Face) -> Info: ...
    def list_features(self, table_type: TableType, tag: int, script_index: int, language_index: int) -> int: ...
    def list_languages(self, table_type: TableType, script_index: int, language_tag: int) -> int: ...
    def list_scripts(self, table_type: TableType) -> int: ...
    

class Ruleset(GObject.Object):
    """
    :Constructors:

    ::

        Ruleset(**properties)
        new(info:PangoOT.Info) -> PangoOT.Ruleset
        new_for(info:PangoOT.Info, script:Pango.Script, language:Pango.Language) -> PangoOT.Ruleset
        new_from_description(info:PangoOT.Info, desc:PangoOT.RulesetDescription) -> PangoOT.Ruleset

    Object PangoOTRuleset

    Signals from GObject:
      notify (GParam)
    """
    def add_feature(self, table_type: TableType, feature_index: int, property_bit: int) -> None: ...
    def get_feature_count(self) -> typing.Tuple[int, int, int]: ...
    @staticmethod
    def get_for_description(info: Info, desc: RulesetDescription) -> Ruleset: ...
    def maybe_add_feature(self, table_type: TableType, feature_tag: int, property_bit: int) -> bool: ...
    def maybe_add_features(self, table_type: TableType, features: FeatureMap, n_features: int) -> int: ...
    @classmethod
    def new(cls, info: Info) -> Ruleset: ...
    @classmethod
    def new_for(cls, info: Info, script: Pango.Script, language: Pango.Language) -> Ruleset: ...
    @classmethod
    def new_from_description(cls, info: Info, desc: RulesetDescription) -> Ruleset: ...
    def position(self, buffer: Buffer) -> None: ...
    def substitute(self, buffer: Buffer) -> None: ...
    

class RulesetDescription(GObject.GBoxed):
    """
    :Constructors:

    ::

        RulesetDescription()
    """
    script: Pango.Script = ...
    language: Pango.Language = ...
    static_gsub_features: FeatureMap = ...
    n_static_gsub_features: int = ...
    static_gpos_features: FeatureMap = ...
    n_static_gpos_features: int = ...
    other_features: FeatureMap = ...
    n_other_features: int = ...
    def copy(self) -> RulesetDescription: ...
    def equal(self, desc2: RulesetDescription) -> bool: ...
    def free(self) -> None: ...
    def hash(self) -> int: ...
    

class TableType(GObject.GEnum):
    GPOS = 1
    GSUB = 0

